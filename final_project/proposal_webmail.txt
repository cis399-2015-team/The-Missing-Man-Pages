(copied from Steve's site for reference)
1.    concrete goals for your project, and methods of testing and verification you will apply to determine whether those goals were met
2.    a discussion of your project's effect on its user population, and the user support issues it might raise
3.    a discussion of security issues relevant to your project
4.    a discussion of the work needed to complete the project and what might be needed to maintain it for continued future use
5.    documentation of the project, both for the system administration work involved and for your user community 


First of all, the two web-based IMAP clients that I'm currently aware of are:
 1. Roundcube
 2. Squirrelmail
Any thoughts about that choice?


A draft of the proposal:

1. Our project is to install, configure, and run a web-based IMAP client on one of our mail servers so that remote authenticated Internet users (in this case, just us three) can send and receive email from a web browser. It should be rather simple to test for the functionality of the basics; I mean, we need to be able to log in from the Internet and send/receive mail. Of course, if we implement any of the other stuff mentioned below like brute-force password attack or spam protection, we would have to stage some such "attacks" ourselves to test those protections. 
2. Since email is a heavily-used service, hypothetically a lot of people would use  it. As such, we would ideally like to provide it in a rather high-uptime manner. Similarly, as far as security considerations allow, we would probably like to provide an automated way of resetting login information such as passwords and usernames. Hopefully the webmail client we choose has good end-user documentation for its interface; otherwise, we might have to write some ourselves.
3. Supposing we won't force our users to carry private keys around with them, this will be a username/password-authenticated service; now we've fallen into the trap of insecure passwords. To start simply, we could set a somewhat high minimum password length (8 chars?) and disallow more than some number (10?) of consecutively failed login attempts from a particular IP. We should also look into any application-specific security problems that may come with whatever software we end up using. Some sort of spam-blocker would also be greatly appreciated by our users. For the password rate-limiter feature, perhaps we'd like to get notified if one IP keeps banging on the server.
4. Based on my current understanding, we're currently not too far away from an at least minimally functioning web IMAP client. We already have sendmail, providing the IMAP server, set up on all of our instances, so, in theory, all we need to do is set up the web interface. I suppose we will implement this with puppet from the start, but, if not, we should definitely make sure of that at some point.
5.
 a) We could write up a "help" page for users to access from the login page detailing at least how to log in and perhaps how to set up an account (if implemented) and other such stuff. Hypothetically, we could also provide contact information for ourselves or perhaps the customer service department in case the help page wasn't enough.
 b) For the sysadmins, we'll have our puppet code, which should serve as a pretty good baseline for showing how the server gets set up. I imagine we will also want to write a broad overview in English of the project, being sure to detail anything counterintuitive, hacky, or unobvious. In particular, we should make it clear how to preserve user-specific data (i.e. emails saved on the server) and migrate it to a new server in a manner transparent to the user.
