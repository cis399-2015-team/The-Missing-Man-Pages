Our final project writeup is organized in like to the Final Project Guidelines bulletpoints specified.
We assure you that there is SOME interesting content in this writeup despite the fact that we did not create a mainframe for Bob to mend and defend, where the user lives outside the net and inputs games for pleasure, as we had originally intended.


(1) System Goals and Concerns:
    This system administration project intends to provide an easy-to-access interface for sending and receiving emails. Because our email system is web-browser-based, it will be accessible from most internet-connected devices. Without such a feature users would have to send mail with a command line interface, some other IMAP client, or a different mail service altogether. Because we have configured this email service ourselves we will have greater control over its use, which should allow us to give timely and detailed reports to clients and/or managers, control things like file upload limits and mediate storage demands and requests.
    
(1, B)   Testing and Verification:
    Initial project testing during configuration involved checking a few log files and tailing error messages by reconfiguring properly. As the project has grown more complex it has become necessary to implement puppet modules in order to control the configuration of system components more quickly, easily, and, most importantly, in a consistant and reusable manner. With our current puppet modules, we are able to completely switch responsibilities between the two puppet agents with only a few extra configuration changes needed.
    After the initial build/configuration, blackbox testing on webmail features was allowed to begin. This required confirming essential mail features remained functional after any substantial configuration changes. User authentication, sending/receiving mail, and session data storage were some of the commonly tested features after changes to configuration.
    Once our final configuration was established, we performed glass-box testing against all security claims (file access restrictions, forced secure protocols, etc.) and reliability requirements (responses to large quantities of mail being sent simultaneously simultaneous logins/session sharing, etc.). Most of these tests involved actively monitoring log files while making demands on the system.





(2)   User Satisfaction and Support:
    Issues that may come up as we support this project should be discussed and dissected carefully because email services are a primary means of communication for many people, which means reliability is of utmost concern. Thus, the first major support issue will involve maintaining users access to their email at all times, unless it would need to be restricted for some reason. This means we will need to ensure that the system is remains stable across updates (ideally we would know it was broken before we deployed it). Common support issues that may arise include users forgetting or losing passwords and needing to recover it (2), a user's email account being compromised and having its password changed by an attacker, requiring the account to be locked down until access would be restored to the actual owner of the account. In addition to maintaining high stability and accessibility of the system, we will want to keep performance high. This will involve routine monitoring of the system to find problem areas, such as the server being overloaded to the point of being noticibly unresponsive for users. For this, some sort of dynamic resource allocation such as Amazon's elastic load-balancing system could be used. Routine auditing of storage usage will help identify users who have not archived or deleted email regularly enough. In these cases we could request that such users archive or delete their older emails to free up more storage space for the rest of the user base. However, for a large number of users, doing this on a per-user basis could be impossible or at least very time-consuming. A more scalable approach could be limiting the total size of all mail stored by the user on our servers, perhaps causing the oldest mail to be deleted if new mail would arrive after the usage limit being reached.
    User related concerns:
    *Users must be monitored for malicious activity (spamming, spreading malware, etc.)
    *Even if users are trusted, there remains the possibility that their accounts could be exposed to infiltration by a third party. This means that mail and login activity must be monitored for possible malicious activity. Roundcube errors such as failed IMAP login attempts are logged in /var/www/roundcubemail-1.1.2/logs/errors (an access protected file). Dovecot and SMTP log messages can be tracked through /var/log/mail.log.
   




(3) Security Issues:
    An explanation of the firewall rules in place (and required by the webmail system) is described in full in the "puppet_documentation" file referenced later in this document. In brief, connections to/from servers in the private subnet are allowed via IMAP, SMTP and memcached (port 11211). Connections to the front end web server are allowed from any IP via HTTPS. Visiting the insecure http version of the roudcube subdirectory our webpage results in a forced redirection to the secure page (https). A self-signed certificate is used for https, which requires users to add an exception within their web browser in order to access our webmail services. Ideally, we would purchace a certificate from a trusted certificate authority.
    As stated, IMAP connections are only allowed from servers within the private subnet, but further measures could be taken to force clients to connect via IMAPS, ensuring that IMAP login data is secured for transfer through the network. Enabling such secure connections would also make it feasable to allow users to connect to our mail system with their own IMAP clients. There was some attempt to force connections through TLS, but this will have to be placed on the burden of future developers due to time constraints. 
    SMTP connections also warrant the implementation of further security measures, such as forcing client-to-server connections to connect via the secure SMTP port, with SSL encryption. Again, this burden will be placed on those developing this webmail system further, due to time constraints.
    We use a simple DNS blacklist (zen.spamhaus.org) to block spam: a custom error message is reported to aid in tracking of accidentally blocked messages. We did not implement client-side email filtering or scanning through ClamAV but this was an intended feature for this webmail system. Future developers should explore scanning emails via ClamAV before routing them to user mailboxes!
    We also have php-cgi in use on the system which needs to be evaluated and possibly restricted due to bugs that can cause information to be leaked.





(4) Concerns for Future Development/Maintenance:
(a discussion of the work needed to complete the project and what might be needed to maintain t for continued future use, and ways that installation and maintenance tasks can be automated:)
(4, A) Completing the Project: 
    Security concerns have already been stated in the security issues section. Future developers/maintainers should pay special attention to the security issues section, addressing SMTP SSL connections, IMAPS connections, ClamAV filtering, and HTTPS/SMTPS certificate acquisition!
    We did not explore LDAP as we had hoped, but Roundcube has LDAP plugins and LDAP would fulfill password-change feature requirements and allow us to expand our feature set extensively.
(4, B) System Maintence:
    Much of the configuration is automated, with the caveat that the system must be reconfigured when redeployed due to IP and DNS differences. We claim that there are only a few configuration changes necessary to redeploy webmail services on a new set of machines. Redeployment is mainly addressed in this document, so future developers will have to consult software-specific documentation or deduce configuration details from the puppet modules in order to more deeply understand our system.
    Maintenance Concerns:
        See user-related concerns (i.e. overflowing mailboxes, malicious activity monitoring, user account security)
        In the event that a fallback server is needed to replace the main server for updates, a fallback server must be properly configured and tested through a seperate front-end web server.





(5) Project Documentation: 
(documentation of the project, both for the system administration work involved and for your user community:)
    The git commit log reflects some but not all contributions to the project, but since it seems necessary to document this webmail system's build process and configuration details thoroughly enough to allow future development to occur and to allow hypothetical users to request support.
    Many configuration details can be gleamed from the puppet manifest files for relevant puppet modules. We have also provided a "puppet_documentation" file which can be found in this directory and provides details on how the responsibilities of this webmail system are split across servers. Please see final_project/puppet_documentation for a more complete response to this question/concern. A large portion of the Roundcube configuration process was drawn from the roundcube "INSTALLATION" and "CONFIGURATION" files provided by the Roundcube framework software package, as well as the 'howto' documentation on the Roundcube website.
    Summarizing the work involved in the project, emphasis was placed on session sharing, basic security plugs, and automating configuration via custom puppet modules. There was also an importance placed on the design of our system on three seperate hosts being secured, with some important features such as forcing client-to-server secure SMTP connections and secure password changing mechanisms being left for future developers to implement.
